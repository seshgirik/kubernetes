apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-cache
spec:
  selector:
    matchLabels:
      app: store
  replicas: 3
  template:
    metadata:
      labels:
        app: store
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - store
            topologyKey: "kubernetes.io/hostname"
      containers:
      - name: redis-server
        image: redis:3.2-alpine
# selector label app=store. The deployment has PodAntiAffinity configured to ensure the scheduler does not co-locate replicas on a single node.
#redis-cache-67786cc786-g4d79        0/1     Pending     0          4m3s    <none>      <none>   <none>           <none>
#redis-cache-67786cc786-k2qxx        1/1     Running     0          4m3s    10.1.1.27   sesh     <none>           <none>
#redis-cache-67786cc786-wdqwf        0/1     Pending     0          4m3s    <none>      <none>   <none>           <none>
# as shown above only one pod is running ,remaining replicas are in pending becoz as per podAntiAffinity pods 
# should not be colocated in same node, one pod is already created in current node , other nodes are not available 
# so those pods in pending state
# selector label app=store. The deployment has PodAntiAffinity configured to ensure the scheduler does not co-locate 
# replicas on a single node.
